/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapplication;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import javax.imageio.ImageIO;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JToggleButton;

/**
 * This class is the main chatting window that the user interacts with
 * It handles everything from integrating with their handler to send/receive messages
 * and refresh chats, sending requests to the server in order to retrieve conversations
 * and update conversations, linking the client to different windows such as the update
 * screen and the new chats screen, and insures offline messaging between users as
 * well as keeping the conversations up to date
 * @author Hsen
 */
public class ClientForm extends javax.swing.JFrame {
    /**
     * Creates new form ClientForm
     */
    private Socket socket;
    private Socket chatsSocket;
    private DataInputStream chatsInputStream;
    private DataInputStream inputStream;
    private DataOutputStream outputStream;
    private String clientName;
    private String username;
    private boolean stopThread = false;
    private String allChatStreams;
    private StringBuilder localConvStream;
    private String newestReceived = "";
    private boolean newChatSent = false;
    
   
    public ClientForm(
            String username,
            Socket socket,
            Socket chatsSocket,
            DataInputStream chatsInputStream,
            DataOutputStream chatsOutputStream,
            DataInputStream inputStream,
            DataOutputStream outputStream
    ) {
        initComponents();
        setVisible(true);
        this.username = username;
        this.socket = socket;
        this.chatsSocket = chatsSocket;
        this.chatsInputStream = chatsInputStream;
        this.inputStream = inputStream;
        this.outputStream = outputStream;
        setupForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatWindow = new javax.swing.JPanel();
        chatWindowTextAreaScrollPane = new javax.swing.JScrollPane();
        chatWindowTextArea = new javax.swing.JTextArea();
        chatWindowTextField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        chatsScrollPane = new javax.swing.JScrollPane();
        chatsPanel = new javax.swing.JPanel();
        loggedInAsLabel = new javax.swing.JLabel();
        manageButton = new javax.swing.JToggleButton();
        logoutButton = new javax.swing.JToggleButton();
        newButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");
        setResizable(false);

        chatWindowTextArea.setEditable(false);
        chatWindowTextArea.setColumns(20);
        chatWindowTextArea.setLineWrap(true);
        chatWindowTextArea.setRows(5);
        chatWindowTextAreaScrollPane.setViewportView(chatWindowTextArea);

        chatWindowTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chatWindowTextFieldKeyPressed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        chatsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        chatsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        chatsScrollPane.setMaximumSize(new java.awt.Dimension(20, 7));
        chatsScrollPane.setPreferredSize(new java.awt.Dimension(20, 7));

        chatsPanel.setLayout(new javax.swing.BoxLayout(chatsPanel, javax.swing.BoxLayout.Y_AXIS));
        chatsScrollPane.setViewportView(chatsPanel);

        javax.swing.GroupLayout chatWindowLayout = new javax.swing.GroupLayout(chatWindow);
        chatWindow.setLayout(chatWindowLayout);
        chatWindowLayout.setHorizontalGroup(
            chatWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatWindowLayout.createSequentialGroup()
                .addComponent(chatWindowTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(chatWindowLayout.createSequentialGroup()
                .addComponent(chatsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatWindowTextAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        chatWindowLayout.setVerticalGroup(
            chatWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatWindowLayout.createSequentialGroup()
                .addGroup(chatWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chatWindowTextAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(chatsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chatWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chatWindowTextField)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        loggedInAsLabel.setText("Logged In As: ");

        manageButton.setText("Manage");
        manageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageButtonActionPerformed(evt);
            }
        });

        logoutButton.setText("Log Out");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chatWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loggedInAsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(manageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logoutButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loggedInAsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        sendMessage();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void chatWindowTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chatWindowTextFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sendMessage();
        }
    }//GEN-LAST:event_chatWindowTextFieldKeyPressed
   /**
 * This method is responsible for insuring a connection between the user and the 
 * database so he can update his credentials, it handles everything from fetching
 * user information to filling the necessary info and finally forwarding it to
 * the RegisterForm in update mode
 */
    private void manageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageButtonActionPerformed
        try {
            Socket userInfoSocket = new Socket("localhost", Server.port);
            Socket imageSocket = new Socket("localhost", Server.port);
            var userInfoInputStream = new DataInputStream(userInfoSocket.getInputStream());
            var userInfoOutputStream = new DataOutputStream(userInfoSocket.getOutputStream());
            String infoRequest = "userInfoStream:::" + username;
            userInfoOutputStream.writeUTF(infoRequest);
            System.out.println("User info request are sent: " + infoRequest);
            String userInfo = userInfoInputStream.readUTF();
            System.out.println("attempting to read image file");
            var bufferedImage = ImageIO.read(imageSocket.getInputStream());
            imageSocket.close();
            userInfoSocket.close();
            System.out.println(bufferedImage);
            // convert buffered image into an input stream
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            ImageIO.write(bufferedImage, "jpg", os);
            InputStream image = new ByteArrayInputStream(os.toByteArray());
            
            System.out.println(userInfo);
            new RegisterForm(userInfo, image);
            super.dispose();
        } catch(IOException e) {
            System.out.println(e.getStackTrace());
            System.out.println(e.getMessage());
        }
        
    }//GEN-LAST:event_manageButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        logout();
        super.dispose();
        new LoginForm();
    }//GEN-LAST:event_logoutButtonActionPerformed
 /**
 * This method opens the new chats window so users can communicate with other
 * registered users and fetches the corresponding information from it so it
 * can handle the syncing itself
 */
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        var dialog = new ChatsDialog(this, true, allChatStreams, localConvStream);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                System.exit(0);
            }
        });
        
        String recipient = dialog.getRecipient();
        String message = dialog.getMessage();
        if(message != null && recipient != null && !message.isBlank() && !recipient.isBlank())
            sendMessage(recipient, message);
        
    }//GEN-LAST:event_newButtonActionPerformed
 /**
 * This method fetches user conversations from the server so it can stay up to date
 * and synchronized
 */   
    private String fetchConversations() {
        String convStream;
        try {
            var convSocket = new Socket("localhost", Server.port);
            var convInputStream = new DataInputStream(convSocket.getInputStream());
            var convOutputStream = new DataOutputStream(convSocket.getOutputStream());
            System.out.println("Sending conversation stream request");
            convOutputStream.writeUTF("conversationStream:::" + username);
            System.out.println("Fetching conversation stream");
            convStream = convInputStream.readUTF();
            convSocket.close();
            System.out.println("Conversation stream successfully received");
            return convStream;
            
        } catch(IOException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }
    
 /**
 * This method generates the chat buttons that the user can click on to start
 * a conversation, it takes as a parameter the name to generate and his online/offline
 * status
 * @param name
 * @param status
 * 
 */
    private void generateChatButtons(String name, String status) {
        JToggleButton btn = new JToggleButton(name);
        btn.setName(name + "Button");
        if(newestReceived.equals(name)) {
            btn.setBackground(Color.GREEN);
            newestReceived = "";
        } else {
            btn.setBackground(new Color(214,217,223));
        }
        JLabel label = new JLabel(status);
        label.setFont(new Font(label.getFont().getName(), Font.PLAIN, 10));
        assignActionToButton(btn);
        label.setName(name + "Label");
        
        chatsPanel.add(btn);
        chatsPanel.add(label);
    }

 /**
 * This method updates a certain conversation so the user can stay up to date with
 * his peers
 */    
    private void updateConversation(String recipient) {
        System.out.println("Updating conversation for recipient " + recipient);
        if(!chatWindowTextArea.getText().isBlank()) {
            var builder = new StringBuilder();
            builder.append(recipient).append("##")
                    .append(chatWindowTextArea.getText());
            if(localConvStream.toString().isBlank())
                localConvStream.append(builder.toString()).append("###");
            else {
                String convs[] = localConvStream.toString().split("###");
                localConvStream = new StringBuilder();
                boolean found = false;
                for(String conv: convs) {
                    if(conv.split("##")[0].equals(recipient)) {
                        found = true;
                        localConvStream.append(builder.toString()).append("###");
                    }
                    else
                        localConvStream.append(conv).append("###");
                }
                if(!found)
                    localConvStream.append(builder.toString()).append("###");
            }
        }
        System.out.println("Updated conversation");
        System.out.println(localConvStream);
    }
    
  /**
 * This method sends the updated conversations to the server for synchronization
 */
    private void sendUpdatedConversations() {
        try {
            if(!localConvStream.toString().isBlank()) {
                System.out.println("Sending updated conversations");
                var updateConvStream = "updateConversationStream:::" 
                        + username 
                        + ">>>" 
                        + localConvStream.toString();
                var updateConvSocket = new Socket("localhost", Server.port);
                var updateConvOutputStream = new DataOutputStream(updateConvSocket.getOutputStream());
                updateConvOutputStream.writeUTF(updateConvStream);
            }
        } catch(IOException e) {
            System.out.println(e.getMessage());
        }
            
    }
    
 /**
 * This method assigns the corresponding actions to toggle chat buttons
 */
    private void assignActionToButton(JToggleButton btn) {
        btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clickChatButton(((JToggleButton)e.getSource()));
            }
        });
    } 
    
    private void clickChatButton(JToggleButton btn) {
        btn.setBackground(new Color(214,217,223));
        btn.setSelected(false);
        String recipient = "";
        for(Component component: chatsPanel.getComponents()) {
            if(component instanceof JToggleButton) {
                var tglbtn = (JToggleButton)component;
                if(tglbtn.isSelected()) {
                    recipient = tglbtn.getText();
                }
                tglbtn.setSelected(false);
            }
        }
        if(!recipient.isBlank()) {
            updateConversation(recipient);
        }
        chatWindowTextArea.setText("");
        String recipientName = btn.getText();
        for(String conv: localConvStream.toString().split("###")) {
            String convItems[] = conv.split("##");
            if(convItems[0].equals(recipientName)) {
                chatWindowTextArea.setText(convItems[1]);
                break;
            }
        }
        btn.setSelected(true);

        revalidate();
    }
    /**
 * This method manages sending messages between client and client
 * (It is specific for the new chats fetched)
 */
    private void sendMessage(String recipient, String message) {
        try {
            chatWindowTextField.setText("");
            chatWindowTextArea.setText("");
            StringBuilder outputMessage = new StringBuilder();
            outputMessage.append(message)
                    .append("###")
                    .append(recipient);
            if(chatWindowTextArea.getText().isBlank()) {
                chatWindowTextArea.setText(
                        "Me: " + message
                );
            } else {
                chatWindowTextArea.setText(
                        chatWindowTextArea.getText()
                        + "\n" + "Me: " + message
                );
            }
            updateConversation(recipient);
            sendUpdatedConversations();
            outputStream.writeUTF(outputMessage.toString());
            var selectNewConversation = new Runnable() {
                @Override
                public void run() {
                    boolean clicked = false;
                    try {
                        Thread.sleep(100);
                    } catch(InterruptedException e) {
                        System.out.println(e.getMessage());
                    }


                    while(!clicked) {
                        for(Component comp: chatsPanel.getComponents()) {
                            if(comp instanceof JToggleButton) {
                                var tglbtn = (JToggleButton)comp;
                                if(tglbtn.getText().equals(recipient)) {
                                    clickChatButton(tglbtn);
                                    clicked = true;
                                    break;
                                }    
                            }
                        }
                    }
                    newChatSent = true;
                }
            };
            new Thread(selectNewConversation).start();
        } catch(IOException e) {
            System.out.println(e.getMessage());
        }
            
    }
 /**
 * This method manages sending messages between client and client
 */    
    private void sendMessage() {
        try {
            if(!chatWindowTextField.getText().isBlank()) {
                String recipientName = "";
                for(Component comp: chatsPanel.getComponents()) {
                    if(comp instanceof JToggleButton) {
                        var btn = (JToggleButton)comp;
                        if(btn.isSelected()) {
                            recipientName = btn.getText();
                            break;
                        }   
                    }
                }
                if(recipientName.isBlank()) {
                    JOptionPane.showConfirmDialog(
                            null, 
                            "Please select a user to send this message to",
                            "No recipient selected",
                            JOptionPane.DEFAULT_OPTION
                    );
                } else {
                    String clientMessage = chatWindowTextField.getText();
                    chatWindowTextField.setText("");
                    StringBuilder outputMessage = new StringBuilder();
                    outputMessage.append(clientMessage)
                            .append("###")
                            .append(recipientName);
                    if(chatWindowTextArea.getText().isBlank()) {
                        chatWindowTextArea.setText(
                                "Me: " + clientMessage
                        );
                    } else {
                        chatWindowTextArea.setText(
                                chatWindowTextArea.getText()
                                + "\n" + "Me: " + clientMessage
                        );
                    }
                    updateConversation(recipientName);
                    sendUpdatedConversations();
                    outputStream.writeUTF(outputMessage.toString());
                }
            }
        } catch(IOException e) {
            System.out.println(e.getMessage());
        }  
    }
 /**
 * This method logs the user out and closes the resources for data saving
 */ 
    public void logout() {
        try {
            stopThread = true;
            System.out.println("Initiating logout sequence");
            String recipient = "";
            for(Component comp: chatsPanel.getComponents()) {
                if(comp instanceof JToggleButton) {
                    var btn = (JToggleButton)comp;
                    if(btn.isSelected())
                        recipient = btn.getText();
                }
            }
            if(!recipient.isBlank())
                updateConversation(recipient);
            System.out.println(localConvStream.toString());
            
            sendUpdatedConversations();
            
            System.out.println("logging out...");
            System.out.println("Sending logout signal");
            outputStream.writeUTF("logout");
            System.out.println("Log out signal sent");
            socket.close();
            chatsSocket.close();
        } catch(IOException e) {
            System.out.println("Could not connect to server");
        }
    }
/**
 * This method starts the form, it handles everything from receiving and synchronizing
 * messages to refreshing chats and integrating them with the conversations
 */ 
    public void setupForm() {    
        try {
            localConvStream = new StringBuilder(fetchConversations());
            Thread receiveMessage = new Thread() {
                @Override
                public synchronized void run() {
                    while(!stopThread) {
                        try {
                            System.out.println("Waiting for message stream");
                            String receivedStream = inputStream.readUTF();
                            System.out.println("Printing out received stream");
                            System.out.println(receivedStream);
                            String receivedName = receivedStream.split("###")[0];
                            String receivedMessage = receivedStream.split("###")[1];
                            boolean found = false;
                            for(Component comp: chatsPanel.getComponents()) {
                                if(comp instanceof JToggleButton) {
                                    var tglbtn = (JToggleButton)comp;
                                    if(tglbtn.getText().equals(receivedName)) {
                                        if(tglbtn.isSelected()) {
                                            found = true;
                                            if(chatWindowTextArea.getText().isBlank()) {
                                                chatWindowTextArea.setText(
                                                        receivedName 
                                                        + ": " + receivedMessage
                                                );
                                            } else {
                                                chatWindowTextArea.setText(
                                                        chatWindowTextArea.getText()
                                                        + "\n" + receivedName
                                                        + ": " + receivedMessage
                                                );
                                            }
                                        } else {
                                            tglbtn.setBackground(Color.GREEN);
                                        }
                                            
                                    } 
                                }
                            }
                            if(!found) {
                                newestReceived = receivedName;
                                if(localConvStream.toString().isBlank()) {
                                    localConvStream
                                            .append(receivedName)
                                            .append("##")
                                            .append(receivedName).append(": ")
                                            .append(receivedMessage)
                                            .append("###");
                                } else {
                                    String localConvStreamArr[] = localConvStream.
                                        toString().split("###");
                                    localConvStream = new StringBuilder();
                                    boolean chatExists = false;
                                    for(String conv: localConvStreamArr) {
                                        System.out.println("conv is: " + conv);
                                        String convItems[] = conv.split("##");
                                        if(convItems[0].equals(receivedName)) {
                                            chatExists = true;
                                            conv = conv + "\n" + receivedName
                                                    + ": " + receivedMessage;
                                        }
                                        localConvStream.append(conv).append("###");
                                    }
                                    if(!chatExists) {
                                        localConvStream
                                            .append(receivedName)
                                            .append("##")
                                            .append(receivedName).append(": ")
                                            .append(receivedMessage)
                                            .append("###");
                                    }
                                } 
                            }
                            System.out.println("Printing out resulting localConvStream");
                            System.out.println(localConvStream);
                        } catch(IOException e) {
                            System.out.println(e.getMessage());             
                        }
                    }
                }
            };
            
            Thread refreshChats = new Thread() {
                @Override
                public void run() {
                    try {
                        String chatStreams;
                        String[] newStream;
                        while(!stopThread) {
                            var builder = new StringBuilder();
                            for(Component component: chatsPanel.getComponents()) {
                                if(component instanceof JToggleButton) {
                                    builder.append(((JToggleButton)component).getText());
                                    builder.append("##");
                                }
                                if(component instanceof JLabel) {
                                    builder.append(((JLabel)component).getText());
                                    builder.append("###");
                                }
                            }
                            chatStreams = builder.toString();
                            newStream = chatsInputStream.readUTF().split(">>>");
                            
                            clientName = newStream[0];
                            String newChatStreams;
                            try {
                                newChatStreams = newStream[1];
                            } catch(ArrayIndexOutOfBoundsException e) {
                                newChatStreams = "";
                            }
                            
                            loggedInAsLabel.setText(
                                "Logged in as: "
                                + clientName
                            );
                            
                            if(!chatStreams.equals(newChatStreams) || newChatSent) {
                                newChatSent = false;
                                System.out.println("New chat streams detected");
                                System.out.println(newChatStreams);
                                chatStreams = newChatStreams;
                                allChatStreams = chatStreams;
                                String chatStreamsArr[] = chatStreams.split("###");
                                chatsPanel.removeAll();
                                System.out.println(localConvStream);
                                for(String chatStream: chatStreamsArr) {
                                    String chatStatus[] = chatStream.split("##");
                                    for(String conv: localConvStream.toString().split("###")) {
                                        
                                        String name = chatStatus[0];
                                        if(conv.split("##")[0].equals(name)) {
                                            String status;
                                            if(chatStatus[1].equals("true")) {
                                                status = "Online";
                                            } else {
                                                status = "Offline";
                                            }
                                            generateChatButtons(name, status);
                                        }
                                            
                                    }
                                    
                                }
                                revalidate();
                                repaint();
                            } 
                        }
                    } catch(IOException e) {
                        System.out.println(e.getMessage());
                    }
                }
            };
            refreshChats.start();
            receiveMessage.start();
        } catch(Exception e) {
            
        }
        
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                logout();
            }

        });
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chatWindow;
    private static javax.swing.JTextArea chatWindowTextArea;
    private javax.swing.JScrollPane chatWindowTextAreaScrollPane;
    private javax.swing.JTextField chatWindowTextField;
    private javax.swing.JPanel chatsPanel;
    private javax.swing.JScrollPane chatsScrollPane;
    private javax.swing.JLabel loggedInAsLabel;
    private javax.swing.JToggleButton logoutButton;
    private javax.swing.JToggleButton manageButton;
    private javax.swing.JButton newButton;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables

    public JTextArea getChatWindowTextArea() {
        return chatWindowTextArea;
    }
}
