/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapplication;

import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * This class is responsible for registering a new user into the chatting application
 * @author Hsen
 */
public class RegisterForm extends javax.swing.JFrame {
    private Socket socket;
    private DataInputStream inputStream;
    private DataOutputStream outputStream; 
    private FileInputStream file;
    private byte[] source;

    /**
     * Creates new form RegisterForm
     * 
     * 
     */
    
    boolean update = false;
 /**
 * This constructor is responsible for the create feature of the RegisterForm
 */
    public RegisterForm() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        initComponents();
        setVisible(true);
    }
 /**
 * This constructor is responsible for the update feature of the RegisterForm
 * It takes the registration stream and the image fetched from the server as a parameter 
 * @param stream
 * @param image
 */
    public RegisterForm(String stream, InputStream image) {
        initComponents();
        setVisible(true);
        String info[] = stream.split("###");
        usernameTextField.setText(info[0]);
        passwordField.setText(info[1]);
        String date[] = info[2].split("-");
        yearTextField.setText(date[0]);
        monthTextField.setText(date[1]);
        dayTextField.setText(date[2]);
        try {
            byte[] buffer = new byte[image.available()];

            ByteArrayOutputStream output = new ByteArrayOutputStream();
            int byteCount;
            while ((byteCount = image.read(buffer)) != -1)
            {
                output.write(buffer, 0, byteCount);
            }
            source = output.toByteArray();

            var newStream = new ByteArrayInputStream(source);
            var loadedImage = ImageIO.read(newStream);
            Image resized_image = loadedImage.getScaledInstance(
                    addImageLabel.getWidth(),
                    addImageLabel.getHeight(),
                    Image.SCALE_SMOOTH);
            addImageLabel.setIcon(new ImageIcon(resized_image));
            
        } catch(IOException e) {
            System.out.println(e.getMessage());
        }
            
        update = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        confirmPasswordLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        dayTextField = new javax.swing.JTextField();
        registerButton = new javax.swing.JToggleButton();
        yearTextField = new javax.swing.JTextField();
        monthTextField = new javax.swing.JTextField();
        loginButton = new javax.swing.JToggleButton();
        addImageButton = new javax.swing.JButton();
        addImageLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        passwordConfirmField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        confirmPasswordLabel.setText("Confirm Password");

        ageLabel.setText("Age");

        dayTextField.setText("DD");
        dayTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dayTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dayTextFieldFocusLost(evt);
            }
        });
        dayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dayTextFieldKeyTyped(evt);
            }
        });

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        yearTextField.setText("YYYY");
        yearTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                yearTextFieldFocusLost(evt);
            }
        });
        yearTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                yearTextFieldKeyTyped(evt);
            }
        });

        monthTextField.setText("MM");
        monthTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                monthTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                monthTextFieldFocusLost(evt);
            }
        });
        monthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                monthTextFieldKeyTyped(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        addImageButton.setText("Add image");
        addImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageButtonActionPerformed(evt);
            }
        });

        addImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addImageLabel.setText("No Image Selected");
        addImageLabel.setMaximumSize(new java.awt.Dimension(130, 130));
        addImageLabel.setMinimumSize(new java.awt.Dimension(130, 130));
        addImageLabel.setPreferredSize(new java.awt.Dimension(130, 130));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(confirmPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                        .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(yearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(monthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dayTextField))
                    .addComponent(passwordField)
                    .addComponent(passwordConfirmField))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(131, 131, 131))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(144, 144, 144))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addImageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmPasswordLabel)
                    .addComponent(passwordConfirmField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerButton)
                    .addComponent(loginButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void yearTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearTextFieldFocusGained
        yearTextField.setText("");
    }//GEN-LAST:event_yearTextFieldFocusGained

    private void yearTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearTextFieldFocusLost
        if(yearTextField.getText().equals("")) {
            yearTextField.setText("YYYY");
        }
    }//GEN-LAST:event_yearTextFieldFocusLost

    private void monthTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthTextFieldFocusGained
        monthTextField.setText("");
    }//GEN-LAST:event_monthTextFieldFocusGained

    private void monthTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthTextFieldFocusLost
        if(monthTextField.getText().equals("")) {
            monthTextField.setText("MM");
        }
    }//GEN-LAST:event_monthTextFieldFocusLost

    private void dayTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayTextFieldFocusGained
        dayTextField.setText("");
    }//GEN-LAST:event_dayTextFieldFocusGained

    private void dayTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayTextFieldFocusLost
        if(dayTextField.getText().equals("")) {
            dayTextField.setText("DD");
        }
    }//GEN-LAST:event_dayTextFieldFocusLost

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        registerUser();
        
    }//GEN-LAST:event_registerButtonActionPerformed
 /**
 * This listener redirects back to the LoginForm
 */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        this.dispose();
        new LoginForm();
    }//GEN-LAST:event_loginButtonActionPerformed
 /**
 * This listener loads an image from the local hard drive onto the application
 */
    private void addImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageButtonActionPerformed
        try {
            var chooser = new JFileChooser();
            var filter = new FileNameExtensionFilter("JPG & PNG Images", "jpg", "png", "jpeg");
            chooser.setFileFilter(filter);
            int value = chooser.showOpenDialog(this);
            if(value == JFileChooser.APPROVE_OPTION) {
                var path = chooser.getSelectedFile().getPath();
                file = new FileInputStream(path);
                var image = ImageIO.read(file);
                file = new FileInputStream(path);
                
                Image resized_image = image.getScaledInstance(
                    addImageLabel.getWidth(),
                    addImageLabel.getHeight(),
                    Image.SCALE_SMOOTH);
                addImageLabel.setIcon(new ImageIcon(resized_image));
                

            }
        } catch(IOException e) {
            System.out.println(e.getMessage());
        }
            
    }//GEN-LAST:event_addImageButtonActionPerformed

    private void yearTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearTextFieldKeyTyped
        if(evt.getKeyChar() < '0' 
                || evt.getKeyChar() > '9'
                || yearTextField.getText().length() >= 4) {
            evt.consume();
        }
    }//GEN-LAST:event_yearTextFieldKeyTyped

    private void monthTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_monthTextFieldKeyTyped
        if(evt.getKeyChar() < '0' 
                || evt.getKeyChar() > '9'
                || monthTextField.getText().length() >= 2) {
            evt.consume();
        }
    }//GEN-LAST:event_monthTextFieldKeyTyped

    private void dayTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayTextFieldKeyTyped
        if(evt.getKeyChar() < '0' 
                || evt.getKeyChar() > '9'
                || dayTextField.getText().length() >= 2
                ) {
            evt.consume();
        }
    }//GEN-LAST:event_dayTextFieldKeyTyped
 /**
 * This method is responsible for registering or updating the user
 * The user validation and data integrity happens inside of this method
 * It sends a stream to the server which in turn saves the credentials onto the
 * database, then redirects to the login screen
 */
    public void registerUser() {
        try {
            if(file == null && !update) {
                JOptionPane.showConfirmDialog(
                        null,
                        "Image Cannot be Empty",
                        "Registration Error",
                        JOptionPane.DEFAULT_OPTION
                );
            } else {
                if(
                    usernameTextField.getText().isBlank()
                    || new String(passwordField.getPassword()).isBlank()
                    || dayTextField.getText().isBlank()
                    || monthTextField.getText().isBlank()
                    || yearTextField.getText().isBlank()
                    || yearTextField.getText() == "YYYY"
                    || monthTextField.getText() == "MM"
                    || dayTextField.getText() == "DD"
                ) {
                    JOptionPane.showConfirmDialog(
                            null,
                            "All Fields are Required",
                            "Empty Fields Detected",
                            JOptionPane.DEFAULT_OPTION);
                }
                else if(!new String(passwordField.getPassword())
                        .equals(new String(passwordConfirmField.getPassword()))) {
                    
                    JOptionPane.showConfirmDialog(
                            null,
                            "Passwords do not match",
                            "Password Mismatch",
                            JOptionPane.DEFAULT_OPTION);
                }
                else {
                    System.out.println("opening socket with server");
                    socket = new Socket("localhost", Server.port);
                    System.out.println("opening image socket with server");
                    var imageSocket = new Socket("localhost", Server.port);
                    System.out.println("initiating input and output streams");
                    inputStream = new DataInputStream(socket.getInputStream());            
                    outputStream = new DataOutputStream(socket.getOutputStream());
                    var imageOutputStream = new DataOutputStream(imageSocket.getOutputStream());
                    var registerStream = new StringBuilder();
                    if(update) {
                        registerStream.append("registerUpdateStream:::");
                    }
                    else
                        registerStream.append("registerCreateStream:::");
                    registerStream.append(usernameTextField.getText()).append("###")
                    .append(new String(passwordField.getPassword())).append("###")
                    .append(yearTextField.getText()).append("-")
                    .append(monthTextField.getText()).append("-")
                    .append(dayTextField.getText());
                    System.out.println(registerStream.toString());
                    outputStream.writeUTF(registerStream.toString());
                    if(update) {
                        if(file == null) {
                            var updateImageStream = new ByteArrayInputStream(source);
                            imageOutputStream.write(updateImageStream.readAllBytes());
                        } else {
                            if(file.available() == 0) {
                                var updateImageStream = new ByteArrayInputStream(source);
                                imageOutputStream.write(updateImageStream.readAllBytes());
                            } else {
                                imageOutputStream.write(file.readAllBytes());
                            }
                        }
                        imageSocket.close();
                    }
                    else {
                        imageOutputStream.write(file.readAllBytes());
                        imageSocket.close();
                    }
                    if(update) super.dispose();
                    String status = inputStream.readUTF();
                    if(status.equals("success")) {
                        this.socket.close();
                        super.dispose();
                        new LoginForm();
                    } else if(status.equals("failed")) {
                        JOptionPane.showConfirmDialog(
                            null, 
                            "Please try again later",
                            "Something Went Wrong...",
                            JOptionPane.DEFAULT_OPTION);
                        super.dispose();
                        new LoginForm();
                    } else {
                        JOptionPane.showConfirmDialog(
                            null, 
                            "Please try another username",
                            "Username already exists",
                            JOptionPane.DEFAULT_OPTION);
                    }
                }
            }
                
        } catch(IOException e) {
            System.out.println(e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addImageButton;
    private javax.swing.JLabel addImageLabel;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JTextField dayTextField;
    private javax.swing.JToggleButton loginButton;
    private javax.swing.JTextField monthTextField;
    private javax.swing.JPasswordField passwordConfirmField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JToggleButton registerButton;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JTextField yearTextField;
    // End of variables declaration//GEN-END:variables
}
